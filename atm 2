import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class atm3 {
    private static Map<String, Hesap> hesaplar = new HashMap<>();
    private static Scanner scanner = new Scanner(System.in);

    static class Hesap {
        private String kullaniciAdi;
        private String sifre;
        private double bakiye;
        private TransactionHistory transactionHistory;

        public Hesap(String kullaniciAdi, String sifre, double bakiye) {
            this.kullaniciAdi = kullaniciAdi;
            this.sifre = sifre;
            this.bakiye = bakiye;
            this.transactionHistory = new TransactionHistory();
        }

        public String getKullaniciAdi() {
            return kullaniciAdi;
        }

        public String getSifre() {
            return sifre;
        }

        public double getBakiye() {
            return bakiye;
        }

        public TransactionHistory getTransactionHistory() {
            return transactionHistory;
        }

        public void setBakiye(double bakiye) {
            this.bakiye = bakiye;
        }
    }

    static class TransactionHistory {
        private StringBuilder history;

        public TransactionHistory() {
            this.history = new StringBuilder();
        }

        public void addTransaction(String transaction) {
            this.history.append(transaction).append("\n");
        }

        public String getHistory() {
            return this.history.toString();
        }
    }

    public static void main(String[] args) {
        hesaplar.put("mustafa", new Hesap("mustafa", "2105", 1000.0));
        hesaplar.put("berkan", new Hesap("berkan", "2107", 2000.0));

        girisYap();
    }

    public static void girisYap() {
        System.out.println("Kullanıcı Adı:");
        String kullaniciAdi = scanner.nextLine();

        System.out.println("Şifre:");
        String sifre = scanner.nextLine();

        if (hesaplar.containsKey(kullaniciAdi) && sifreDogru(kullaniciAdi, sifre)) {
            System.out.println("Giriş başarılı.");
            while (true) {
                menuGoster(kullaniciAdi);
            }
        } else {
            System.out.println("Hatalı kullanıcı adı veya şifre.");
        }
    }

    public static boolean sifreDogru(String kullaniciAdi, String girilenSifre) {
        if (hesaplar.containsKey(kullaniciAdi)) {
            String gercekSifre = hesaplar.get(kullaniciAdi).getSifre();
            return girilenSifre.equals(gercekSifre);
        } else {
            return false;
        }
    }

    public static void menuGoster(String kullaniciAdi) {
        System.out.println("\n1. Bakiye Sorgula");
        System.out.println("2. Para Çek");
        System.out.println("3. Para Yatır");
        System.out.println("4. İşlem Geçmişi");
        System.out.println("5. Çıkış");
        System.out.println("Lütfen bir seçim yapınız:");

        int secim = scanner.nextInt();
        scanner.nextLine(); // Dummy nextLine() call to clear the input buffer

        islemYap(kullaniciAdi, secim);
    }

    public static void islemYap(String kullaniciAdi, int secim) {
        Hesap hesap = hesaplar.get(kullaniciAdi);
        switch (secim) {
            case 1:
                bakiyeSorgula(hesap);
                break;
            case 2:
                paraCek(hesap);
                break;
            case 3:
                paraYatir(hesap);
                break;
            case 4:
                islemGecmisiGoster(hesap);
                break;
            case 5:
                System.out.println("Çıkış yapılıyor...");
                System.exit(0);
                break;
            default:
                System.out.println("Geçersiz bir seçim yaptınız.");
        }
    }

    public static void bakiyeSorgula(Hesap hesap) {
        double bakiye = hesap.getBakiye();
        System.out.println("Hesap bakiyeniz: " + bakiye + " TL");
    }

    public static void paraCek(Hesap hesap) {
        System.out.println("Çekmek istediğiniz miktarı girin:");
        double cekilecekMiktar = scanner.nextDouble();
        double bakiye = hesap.getBakiye();

        if (cekilecekMiktar > bakiye) {
            System.out.println("Yetersiz bakiye.");
        } else {
            hesap.setBakiye(bakiye - cekilecekMiktar);
            String transaction = "Para çekildi: " + cekilecekMiktar + " TL";
            hesap.getTransactionHistory().addTransaction(transaction);
            System.out.println("Yeni bakiyeniz: " + hesap.getBakiye() + " TL");
        }
    }

    public static void paraYatir(Hesap hesap) {
        System.out.println("Yatırmak istediğiniz miktarı girin:");
        double yatirilacakMiktar = scanner.nextDouble();
        double bakiye = hesap.getBakiye();

        hesap.setBakiye(bakiye + yatirilacakMiktar);
        String transaction = "Para yatırıldı: " + yatirilacakMiktar + " TL";
        hesap.getTransactionHistory().addTransaction(transaction);
        System.out.println("Yeni bakiyeniz: " + hesap.getBakiye() + " TL");
    }

    public static void islemGecmisiGoster(Hesap hesap) {
        System.out.println("İşlem Geçmişi:");
        System.out.println(hesap.getTransactionHistory().getHistory());
    }
}
